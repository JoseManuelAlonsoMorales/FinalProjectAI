import folium
import numpy as np
import pandas as pd
import plotly.express as px
import random
import streamlit as st
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from streamlit_folium import st_folium

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title = 'Proyecto IA - Consumo de Agua en CDMX',
    page_icon = 'üíß',
    layout = 'wide',
    initial_sidebar_state = 'expanded',
    menu_items = {
        'Get Help': None,
        'Report a Bug': None,
        'About': """
            **Integrantes del equipo:**\n
            * Jos√© Manuel Alonso Morales\n
            * Santiago Ba√±uelos Hern√°ndez\n
            * Emiliano Luna Casablanca\n
            [Repositorio de Github](https://github.com/JoseManuelAlonsoMorales/FinalProjectAI)
        """
    }
)

# Cargamos los datos desde un archivo CSV
class Application:
    def __init__(self, path):
        self.__df = pd.read_csv(path)
        self.__colonias = self.__df['colonia'].dropna().unique().tolist()
        self.__alcaldias = self.__df['alcaldia'].dropna().unique().tolist()
        self.__consumo_total = self.__df['consumo_total'].unique()

    def getDataFrame(self):
        return self.__df

    def getColonias(self):
        return self.__colonias
    
    def getAlcaldias(self):
        return self.__alcaldias
    
    def getConsumoTotal(self):
        return self.__consumo_total
    
    def getListaColonias(self):
        return self.data['colonia'].tolist()
    
    def getListaAlcaldias(self):
        return self.data['alcaldia'].tolist()
    
    def getListaConsumoTotal(self):
        return self.data['consumo_total'].tolist()
    
    def limpiarDataFrame(self):
        # Limpiamos valores nulos y cadenas vac√≠as en alcald√≠a y colonia
        self.data = self.__df.dropna(subset=['alcaldia', 'colonia'])

        # Convertimos alcald√≠a y colonia a tipo string y eliminamos los espacios en blanco
        self.data['alcaldia'] = self.data['alcaldia'].astype(str).str.strip()
        self.data['colonia'] = self.data['colonia'].astype(str).str.strip()

        # Eliminamos filas en donde el valor de la alcald√≠a sea nan o una cadena vac√≠a
        self.data = self.data[(self.data['alcaldia'] != '') & (self.data['alcaldia'].notna())]
    
    # Creamos una lista para almacenar la cantidad de agua transportada por colonia
    def generarAguaTransportada(self, seed=2004, max_value=15000):
        consumo = self.data["consumo_total"]
        random.seed(seed)
        return [random.randint(int(consumo.min()), max_value) for _ in range(len(consumo))]

    # Diccionario para almacenar las alcald√≠as y sus colonias con los datos de transporte y consumo
    def getDiccionarioAlcaldiasColonias(self):
        colonias = self.getListaColonias()
        alcaldias = self.getListaAlcaldias()
        consumo_total = self.data["consumo_total"].tolist()
        agua_transportada = self.generarAguaTransportada()

        dicc = {}
        for i in range(len(alcaldias)):
            alcaldia = alcaldias[i]
            colonia = colonias[i]
            transporte = agua_transportada[i]
            consumo = consumo_total[i]

            if alcaldia not in dicc:
                dicc[alcaldia] = {}
            if colonia in dicc[alcaldia]:
                dicc[alcaldia][colonia][0].append(transporte)
                dicc[alcaldia][colonia][1].append(consumo)
            else:
                dicc[alcaldia][colonia] = [[transporte], [consumo]]

        return dicc

def filtroAlcaldiaColonia(app):
    st.sidebar.title("Filtros")

    alcaldias = sorted(list(app.getAlcaldias()))
    alcaldias = ["-- Todas las alcald√≠as --"] + alcaldias
    alcaldia_seleccionada = st.sidebar.selectbox("Selecciona una alcald√≠a", alcaldias)

    if alcaldia_seleccionada != "-- Todas las alcald√≠as --":
        colonias_filtradas = app.data[app.data["alcaldia"] == alcaldia_seleccionada]["colonia"].unique()
        colonias = sorted(colonias_filtradas)
        colonias = ["-- Todas las colonias --"] + colonias
        colonia_seleccionada = st.sidebar.selectbox("Selecciona una colonia:", colonias)
    else:
        colonia_seleccionada = "-- Todas las colonias --"
    
    return alcaldia_seleccionada, colonia_seleccionada

def mostrarSubtitulo(alcaldia_seleccionada, colonia_seleccionada):
    # Subheader de los filtros aplicados
    if alcaldia_seleccionada != "-- Todas las alcald√≠as --":
        if colonia_seleccionada == "-- Todas las colonias --":
            st.subheader(f"Datos en {alcaldia_seleccionada}")
        else:
            st.subheader(f"Datos en {alcaldia_seleccionada} para la colonia {colonia_seleccionada}")

# Inicializamos la aplicaci√≥n y cargamos los datos
app = Application(r'https://raw.githubusercontent.com/JoseManuelAlonsoMorales/FinalProjectAI/main/data/consumo_agua_historico_2019.csv')  # URL del archivo CSV
df = app.getDataFrame()

st.title('An√°lisis del Consumo de Agua en CDMX')

# Comenzamos a trabajar con los datos
app.limpiarDataFrame()  # Limpiamos el DataFrame de valores nulos y cadenas vac√≠as

cant_consumida_max_min = np.array(app.getListaConsumoTotal()) # Convertimos la lista de consumo total a un array de numpy para obtener los valores m√°ximos y m√≠nimos
diccionario_alcaldias_colonias = app.getDiccionarioAlcaldiasColonias() # Obtenemos el diccionario de alcald√≠as y colonias con los datos de transporte y consumo

# Opciones de an√°lisis
tabs = st.tabs(["Introducci√≥n", "Datos", "An√°lisis de Regresi√≥n", "Clasificaci√≥n y Segmentaci√≥n", "Mapa de Consumo])

alcaldia_seleccionada, colonia_seleccionada = filtroAlcaldiaColonia(app)

# Si el usuario selecciona "Introducci√≥n", mostramos un resumen de los datos
with tabs[0]:
    st.markdown("""
        ## An√°lisis del Consumo de Agua en la Ciudad de M√©xico

        Este proyecto tiene como objetivo explorar y analizar patrones de consumo de agua en distintas colonias de la Ciudad de M√©xico, utilizando datos geoespaciales y temporales. La base de datos principal incluye informaci√≥n detallada sobre el consumo de agua por tipo de usuario (dom√©stico, no dom√©stico y mixto), promedios de consumo, as√≠ como indicadores socioecon√≥micos y ubicaciones geogr√°ficas.

        A trav√©s de visualizaciones interactivas y herramientas de an√°lisis, este proyecto busca identificar zonas con posibles problem√°ticas de suministro, contrastar niveles de consumo entre diferentes regiones, y ofrecer una base informada para la toma de decisiones en torno a la gesti√≥n del recurso h√≠drico en la ciudad.

        El an√°lisis abarca m√∫ltiples periodos, permitiendo observar tendencias a lo largo del tiempo y evaluar el impacto de factores como el √≠ndice de desarrollo social o la densidad urbana en el uso del agua.
        """)


# Si el usuario selecciona "Datos", mostramos el DataFrame
with tabs[1]:
    mostrarSubtitulo(alcaldia_seleccionada, colonia_seleccionada)

    # Aplicar filtros seg√∫n selecci√≥n
    df_filtrado = app.data

    if alcaldia_seleccionada != "-- Todas las alcald√≠as --":
        df_filtrado = df_filtrado[df_filtrado["alcaldia"] == alcaldia_seleccionada]

    if colonia_seleccionada != "-- Todas las colonias --":
        df_filtrado = df_filtrado[df_filtrado["colonia"] == colonia_seleccionada]
    
    st.dataframe(df_filtrado)

    st.markdown("""
        En esta secci√≥n puedes explorar el conjunto de datos que contiene informaci√≥n detallada sobre el consumo de agua en distintas colonias y alcald√≠as de la Ciudad de M√©xico.

        El DataFrame incluye las siguientes columnas principales:

        - **fecha_referencia:** Fecha del registro del consumo.
        - **anio:** A√±o al que corresponde el dato.
        - **bimestre:** Periodo bimestral del a√±o.
        - **consumo_total_mixto:** Consumo total de agua para usuarios mixtos (litros).
        - **consumo_prom_dom:** Consumo promedio de agua para usuarios dom√©sticos (litros).
        - **consumo_total_dom:** Consumo total de agua para usuarios dom√©sticos (litros).
        - **consumo_prom_mixto:** Consumo promedio para usuarios mixtos (litros).
        - **consumo_total:** Consumo total combinado (litros).
        - **consumo_prom:** Consumo promedio combinado (litros).
        - **consumo_prom_no_dom:** Consumo promedio para usuarios no dom√©sticos (litros).
        - **consumo_total_no_dom:** Consumo total para usuarios no dom√©sticos (litros).
        - **indice_des:** √çndice de desarrollo social asociado a la colonia.
        - **colonia:** Nombre de la colonia.
        - **alcaldia:** Nombre de la alcald√≠a.
        - **latitud:** Coordenada geogr√°fica de latitud.
        - **longitud:** Coordenada geogr√°fica de longitud.

        Esta informaci√≥n permite un an√°lisis detallado y localizado del consumo h√≠drico, facilitando la identificaci√≥n de patrones y posibles √°reas con retos en el suministro de agua.
        """)


# Si el usuario selecciona "An√°lisis de Regresi√≥n", mostramos el modelo de regresi√≥n lineal
with tabs[2]:
    mostrarSubtitulo(alcaldia_seleccionada, colonia_seleccionada)

    # Recolectar datos seg√∫n filtros
    datos_transporte = []
    datos_consumo = []

    if alcaldia_seleccionada == "-- Todas las alcald√≠as --":
        # Agregamos todos los datos de todas las alcald√≠as y colonias
        for alcaldia in diccionario_alcaldias_colonias:
            for colonia in diccionario_alcaldias_colonias[alcaldia]:
                datos_transporte.extend(diccionario_alcaldias_colonias[alcaldia][colonia][0])
                datos_consumo.extend(diccionario_alcaldias_colonias[alcaldia][colonia][1])
        
    elif colonia_seleccionada == "-- Todas las colonias --":
        for colonia in diccionario_alcaldias_colonias[alcaldia_seleccionada]:
            datos_transporte.extend(diccionario_alcaldias_colonias[alcaldia_seleccionada][colonia][0])
            datos_consumo.extend(diccionario_alcaldias_colonias[alcaldia_seleccionada][colonia][1])
        
    else:
        datos_transporte = diccionario_alcaldias_colonias[alcaldia_seleccionada][colonia_seleccionada][0]
        datos_consumo = diccionario_alcaldias_colonias[alcaldia_seleccionada][colonia_seleccionada][1]

    # Validar datos
    if len(datos_transporte) > 1 and len(datos_transporte) == len(datos_consumo):
        X = np.array(datos_transporte).reshape(-1, 1)
        Y = np.array(datos_consumo)

        modelo = LinearRegression()
        modelo.fit(X, Y)
        y_pred = modelo.predict(X)

        df_plot = pd.DataFrame({
            "Agua Transportada": datos_transporte,
            "Consumo de Agua": datos_consumo,
            "Predicci√≥n de Consumo": y_pred
        })

        fig = px.scatter(df_plot, x="Agua Transportada", y="Consumo de Agua", 
                         color_discrete_sequence=["blue"])
        fig.add_scatter(mode="lines", name="L√≠nea de Regresi√≥n", line=dict(color="red"),
                        x=df_plot["Agua Transportada"], y=df_plot["Predicci√≥n de Consumo"])
        
        st.plotly_chart(fig)

    else:
        st.warning("No hay suficientes datos para entrenar el modelo.")

    st.markdown("""
        ### An√°lisis con Regresi√≥n Lineal

        La regresi√≥n lineal es un modelo estad√≠stico que busca encontrar la relaci√≥n entre dos variables cuantitativas. En este caso, analizamos c√≥mo el **agua transportada** influye en el **consumo de agua**.

        - **Los puntos en el gr√°fico** representan observaciones individuales: cada punto muestra un par de valores de agua transportada y consumo de agua correspondientes a una colonia o alcald√≠a.
        - **La l√≠nea roja (pendiente)** es la l√≠nea de regresi√≥n, que indica la tendencia general de los datos. Esta l√≠nea minimiza la distancia entre ella y todos los puntos.
        - **La pendiente de la l√≠nea** nos muestra c√≥mo cambia el consumo esperado cuando cambia la cantidad de agua transportada:
        - Si la pendiente es positiva (hacia arriba), significa que a mayor agua transportada, mayor es el consumo de agua esperado.
        - Si la pendiente es negativa (hacia abajo), indicar√≠a que un aumento en el agua transportada se asocia con una disminuci√≥n en el consumo, lo cual ser√≠a poco com√∫n en este contexto.
        
        Este an√°lisis nos ayuda a entender y predecir el comportamiento del consumo en funci√≥n del suministro de agua, facilitando la toma de decisiones para una mejor gesti√≥n del recurso.
        """)

# Si el usuario selecciona "Clasificaci√≥n y Segmentaci√≥n", mostramos el modelo de clasificaci√≥n
with tabs[3]:
    mostrarSubtitulo(alcaldia_seleccionada, colonia_seleccionada)
    
    # Construcci√≥n de datos de entrada
    registros = []

    for alcaldia, colonias_dict in diccionario_alcaldias_colonias.items():
        if alcaldia_seleccionada != "-- Todas las alcald√≠as --" and alcaldia != alcaldia_seleccionada:
            continue

        for colonia, valores in colonias_dict.items():
            if colonia_seleccionada != "-- Todas las colonias --" and colonia != colonia_seleccionada:
                continue

            transporte_list = valores[0]
            consumo_list = valores[1]

            for transporte, consumo in zip(transporte_list, consumo_list):
                diferencia = transporte - consumo
                promedio = (transporte + consumo) / 2

                if diferencia <= 0:
                    categoria = "Peligro"
                elif diferencia >= promedio:
                    categoria = "Perfecto"
                else:
                    categoria = "Medio"

                registros.append({
                    "Agua Transportada": transporte,
                    "Consumo de Agua": consumo,
                    "Categor√≠a": categoria
                })

    # Verificaci√≥n
    if not registros:
        st.warning("No hay datos disponibles para la selecci√≥n.")
    else:
        df_clasificacion = pd.DataFrame(registros)

        # Entrenamiento del modelo
        X = df_clasificacion[["Agua Transportada", "Consumo de Agua"]].values
        y_map = {"Peligro": 0, "Medio": 1, "Perfecto": 2}
        y = df_clasificacion["Categor√≠a"].map(y_map).values

        knn = KNeighborsClassifier(n_neighbors=20)
        knn.fit(X, y)

        # Visualizaci√≥n con plotly express
        fig = px.scatter(
            df_clasificacion,
            x="Agua Transportada",
            y="Consumo de Agua",
            color="Categor√≠a",
            symbol="Categor√≠a",
            labels={
                "Agua Transportada": "Agua Transportada (litros)",
                "Consumo de Agua": "Consumo de Agua (litros)"
            }
        )

        st.plotly_chart(fig)

    st.markdown("""
        ### An√°lisis con Modelo de Clasificaci√≥n

        En esta secci√≥n utilizamos un modelo de clasificaci√≥n basado en el algoritmo **K-Nearest Neighbors (KNN)**, que clasifica las observaciones en categor√≠as seg√∫n sus caracter√≠sticas.

        - El modelo toma como entrada dos variables: **agua transportada** y **consumo de agua**.
        - Clasificamos cada punto en tres categor√≠as:
        - **Perfecto**: cuando el agua transportada es significativamente mayor al consumo, indicando un suministro adecuado o exceso.
        - **Medio**: cuando el agua transportada es similar al consumo, mostrando un balance adecuado pero con poca holgura.
        - **Peligro**: cuando el agua transportada es menor o igual al consumo, lo que puede reflejar un riesgo de insuficiencia o desabasto.

        El algoritmo KNN asigna la categor√≠a a cada punto bas√°ndose en la similitud con sus vecinos m√°s cercanos, lo que permite identificar zonas con diferentes niveles de suministro y consumo, facilitando la toma de decisiones para mejorar la distribuci√≥n del agua.
        """)

# Si el usuario selecciona "Clasificaci√≥n y Segmentaci√≥n", mostramos el modelo de clasificaci√≥n
with tabs[4]:
    mostrarSubtitulo(alcaldia_seleccionada, colonia_seleccionada)

    # Filtrar DataFrame seg√∫n selecci√≥n
    df_mapa = app.data
    if alcaldia_seleccionada != "-- Todas las alcald√≠as --":
        df_mapa = df_mapa[df_mapa["alcaldia"] == alcaldia_seleccionada]
    if colonia_seleccionada != "-- Todas las colonias --":
        df_mapa = df_mapa[df_mapa["colonia"] == colonia_seleccionada]

    # Verificamos que haya datos geogr√°ficos
    if df_mapa.empty:
        st.warning("No hay datos geoespaciales disponibles para esta selecci√≥n.")
    else:
        # Coordenadas centrales aproximadas para CDMX
        lat_cdmx = df_mapa["latitud"].mean()
        lon_cdmx = df_mapa["longitud"].mean()

        # Crear el mapa base
        mapa = folium.Map(location=[lat_cdmx, lon_cdmx], zoom_start=12)

        # A√±adir marcadores por colonia
        for _, row in df_mapa.iterrows():
            folium.CircleMarker(
                location=[row["latitud"], row["longitud"]],
                radius=5,
                popup=folium.Popup(
                    f"""<b>Colonia:</b> {row['colonia']}<br>
                        <b>Alcald√≠a:</b> {row['alcaldia']}<br>
                        <b>Consumo Total:</b> {row['consumo_total']} litros<br>
                        <b>√çndice DES:</b> {row.get('indice_des', 'N/A')}""", 
                    max_width=300
                ),
                color='blue',
                fill=True,
                fill_color='cyan',
                fill_opacity=0.7
            ).add_to(mapa)

        # Mostrar el mapa en Streamlit
        st_data = st_folium(mapa, width=900, height=600)

        st.markdown("""
        ### Mapa Interactivo de Consumo de Agua

        Este mapa muestra la distribuci√≥n geogr√°fica del consumo de agua en las colonias de la Ciudad de M√©xico. Puedes usar los filtros de la barra lateral para enfocar el an√°lisis en una alcald√≠a o colonia espec√≠fica.

        - Cada marcador representa una colonia con datos disponibles.
        - Al hacer clic en un punto, se muestra informaci√≥n del consumo total y el √≠ndice de desarrollo social.
        - El mapa facilita la identificaci√≥n espacial de patrones de consumo y zonas prioritarias para intervenci√≥n.
        """)
